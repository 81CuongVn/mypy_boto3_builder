name: Bump version and dockerize

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: Version for publishing
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install builder dependencies
        run: |
          python -m pip install -U boto3 boto3-stubs
      - name: Get version
        id: version
        uses: actions/github-script@v4
        with:
          script: |
            if (context.payload.inputs && context.payload.inputs.version) {
              return context.payload.inputs.version
            }
            return context.ref.split('/').pop()
      - name: Extract variables from env
        id: vars
        run: |
          VERSION=${{ toJSON(steps.version.outputs.result) }}
          echo "Version ${VERSION}"
          LAST_PACKAGE_VERSION=`python -m boto3-stubs --version || echo "0.0.0.0"`
          PACKAGE_VERSION=`echo "${LAST_PACKAGE_VERSION}" | awk 'BEGIN{FS=OFS="."}{$4=$4+1; print $0;}'`
          BOTO3_VERSION=`echo "${PACKAGE_VERSION}" | awk 'BEGIN{FS=OFS="."}{print$1, $2, $3;}'`
          BOTOCORE_VERSION=`echo "${BOTO3_VERSION}" | awk 'BEGIN{FS=OFS="."}{print$1, $2 + 3, $3;}'`

          echo Builder version: ${VERSION}
          echo Last package version: ${LAST_PACKAGE_VERSION}
          echo Build package version: ${PACKAGE_VERSION}
          echo Boto3 version: ${BOTO3_VERSION}
          echo Botocore version: ${BOTOCORE_VERSION}

          echo "##[set-output name=build_version;]$(echo ${PACKAGE_VERSION})"
          echo "##[set-output name=version;]$(echo ${VERSION})"
          echo "##[set-output name=boto3_version;]$(echo ${BOTO3_VERSION})"
          echo "##[set-output name=botocore_version;]$(echo ${BOTOCORE_VERSION})"
      - name: Install builder
        run: |
          python -m pip install -U poetry pip wheel
          poetry config virtualenvs.create false
          poetry install -n
      - name: Install unreleased boto3 stubs
        env:
          BUILD_VERSION: ${{ steps.vars.outputs.build_version }}
        run: |
          ./scripts/build.sh --skip-services -b $BUILD_VERSION
          ./scripts/install.sh master
      - name: Bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.vars.outputs.version }}
        run: |
          scripts/bump_version.sh
          poetry install -n
          poetry shell
      - name: Integration tests
        run: |
          scripts/integration.sh
      - name: Dockerize
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          scripts/dockerize.sh
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          poetry build
          twine upload  --non-interactive dist/*
      - name: Build packages
        env:
          BUILD_VERSION: ${{ steps.vars.outputs.build_version }}
          BOTO3_VERSION: ${{ steps.vars.outputs.boto3_version }}
          BOTOCORE_VERSION: ${{ steps.vars.outputs.botocore_version }}
        run: |
          python -m pip install boto3==${BOTO3_VERSION} botocore==${BOTOCORE_VERSION}
          rm -rf mypy_boto3_output/*
          scripts/build.sh --panic -b $BUILD_VERSION
      - name: Install dependencies for publishing
        run: |
          python -m pip install setuptools wheel twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          scripts/release.sh
