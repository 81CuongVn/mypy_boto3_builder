name: Update boto3-stubs

on:
  schedule:
    - cron: "0 0/2 * * *"
  workflow_dispatch:
    inputs:
      boto3_version:
        description: Target boto3 version
        required: false
      force:
        description: Publish new post-release if exists
        required: false
        default: "false"
      build_all:
        description: Build all packages instead of updated only
        required: false
        default: "false"

jobs:
  check-boto3-version:
    name: Check boto3 version
    runs-on: ubuntu-latest
    outputs:
      boto3-version: ${{ steps.vars.outputs.boto3-version }}
      botocore-version: ${{ steps.vars.outputs.botocore-version }}
      version: ${{ steps.vars.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Extract versions
        id: vars
        uses: actions/github-script@v4
        with:
          script: |
            const { extractVersions } = require('./.github/workflows/helpers.js')
            await extractVersions({ core, context })
  publish-boto3-stubs:
    name: Publish boto3-stubs
    runs-on: ubuntu-latest
    needs: check-boto3-version
    if: needs.check-boto3-version.outputs.version
    env:
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1
      BOTO3_VERSION: ${{ needs.check-boto3-version.outputs.boto3-version }}
      BOTOCORE_VERSION: ${{ needs.check-boto3-version.outputs.botocore-version }}
      VERSION: ${{ needs.check-boto3-version.outputs.version }}
      BUILD_ALL: ${{ context.payload.inputs && context.payload.inputs.build_all || 'false' }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install boto3
        run: |
          python -m pip install -U boto3==${BOTO3_VERSION} botocore==${BOTOCORE_VERSION}
          python -m pip install newversion
      - name: Install builder
        run: |
          rm -rf mypy_boto3_builder
          if [[ "${BOTO3_VERSION}" == *\.0 ]]; then
            echo "Minor boto3 release ${BOTO3_VERSION}, building all packages"
            BUILD_ALL="true"
          fi
          if [[ "${BUILD_ALL}" != "false" ]]; then
            echo "Building all packages"
            python -m pip install mypy_boto3_builder -s all
          else
            echo "Building updated packages"
            python -m pip install mypy_boto3_builder -s updated
          fi
      - name: Build packages
        run: |
          rm -rf mypy_boto3_output/*
          python -m mypy_boto3_builder mypy_boto3_output -b ${VERSION}
      - name: Install dependencies for publishing
        run: |
          python -m pip install setuptools wheel twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          ./scripts/release.sh
