name: Check boto3 version and publish on new

on:
  workflow_dispatch:
    inputs:
      boto3_version:
        required: true
        description: Target boto3 version

jobs:
  timer-check:
    env:
      PIP_NO_CACHE_DIR: false
      PIP_USER: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          rm -rf mypy_boto3_builder
          BOTO3_VERSION=${{ github.event.inputs.boto3_version }}
          BOTOCORE_VERSION=$(echo "${BOTO3_VERSION}" | awk 'BEGIN{FS=OFS="."}{print$1, $2 + 3, $3;}')
          python -m pip install -U boto3==${BOTO3_VERSION} botocore==${BOTOCORE_VERSION}
      - name: Extract versions from pip
        id: vars
        run: |
          BOTO3_VERSION=$(python -c 'import boto3; print(boto3.__version__)')
          LAST_PACKAGE_VERSION=$(curl https://pypi.org/pypi/boto3-stubs/json | jq -r '.releases|keys[]' | grep -F "${BOTO3_VERSION}." | sort -k 4,4 -t '.' | tail -1)
          if [[ "${LAST_PACKAGE_VERSION}" == "" ]]; then
            PACKAGE_VERSION="${BOTO3_VERSION}.0"
            echo No builds found, preparing initial ${PACKAGE_VERSION}
          else
            PACKAGE_VERSION=`echo "${LAST_PACKAGE_VERSION}" | awk 'BEGIN{FS=OFS="."}{$4=$4+1; print $0;}'`
            echo Version ${LAST_PACKAGE_VERSION} found, increasing to ${PACKAGE_VERSION}
          fi

          echo Boto3 version: ${BOTO3_VERSION}
          echo Package version: ${PACKAGE_VERSION}

          echo "##[set-output name=build_version;]$(echo ${PACKAGE_VERSION})"
          echo "##[set-output name=boto3_version;]$(echo ${BOTO3_VERSION})"
      - name: Install builder
        run: |
          python -m pip install mypy_boto3_builder
          python -m pip install mypy
      - name: Integration tests
        run: |
          scripts/integration.sh
      - name: Build packages
        env:
          BUILD_VERSION: ${{ steps.vars.outputs.build_version }}
        run: |
          rm -rf mypy_boto3_output/*
          scripts/build.sh --panic -b $BUILD_VERSION
      - name: Install dependencies for publishing
        run: |
          python -m pip install setuptools wheel twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          scripts/release.sh
